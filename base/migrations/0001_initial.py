# Generated by Django 4.2.3 on 2024-07-24 08:02

import base.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Perimeter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('external_id', models.CharField(max_length=12, verbose_name='Référence')),
                ('priority', models.PositiveIntegerField(default=100, verbose_name="Ordre d'affichage")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('region', models.CharField(choices=[('MA01', 'Tanger-Tétouan-Al Hoceïma'), ('MA02', "L'Oriental"), ('MA03', 'Fès-Meknès'), ('MA04', 'Rabat-Salé-Kénitra'), ('MA05', 'Béni Mellal-Khénifra'), ('MA06', 'Casablanca-Settat'), ('MA07', 'Marrakech-Safi'), ('MA08', 'Drâa-Tafilalet'), ('MA09', 'Souss-Massa'), ('MA10', 'Guelmim-Oued Noun'), ('MA11', 'Laâyoune-Sakia El Hamra'), ('MA12', 'Dakhla-Oued Ed-Dahab'), ('ATRE', 'Autre / Etranger')], max_length=6, verbose_name='Région')),
            ],
            options={
                'verbose_name': 'Périmètre',
                'verbose_name_plural': 'Périmètres',
                'db_table': 'base_perimeter',
                'ordering': ['priority'],
                'default_permissions': ['add', 'change', 'view'],
            },
        ),
        migrations.CreateModel(
            name='Perimeter_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_collapsed', models.BooleanField(default=False, verbose_name='A replier?')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
            ],
            options={
                'verbose_name': 'Catégorie de périmètre',
                'verbose_name_plural': 'Catégories de périmètres',
                'db_table': 'base_perimeter_category',
                'ordering': ['nom'],
                'default_permissions': ['add', 'change', 'view'],
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nom', models.CharField(max_length=30, verbose_name='Nom')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('adresse1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('adresse2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('ville', models.CharField(blank=True, max_length=15, null=True, verbose_name='Ville')),
                ('patente', models.CharField(blank=True, max_length=15, null=True, verbose_name='Patente')),
                ('ref', models.CharField(max_length=5, unique=True, verbose_name='Ref')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('taux_dt', models.DecimalField(decimal_places=3, default=0, help_text='Entre 0 et 100', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Taux de droits de timbre (%)')),
                ('region', models.CharField(choices=[('MA01', 'Tanger-Tétouan-Al Hoceïma'), ('MA02', "L'Oriental"), ('MA03', 'Fès-Meknès'), ('MA04', 'Rabat-Salé-Kénitra'), ('MA05', 'Béni Mellal-Khénifra'), ('MA06', 'Casablanca-Settat'), ('MA07', 'Marrakech-Safi'), ('MA08', 'Drâa-Tafilalet'), ('MA09', 'Souss-Massa'), ('MA10', 'Guelmim-Oued Noun'), ('MA11', 'Laâyoune-Sakia El Hamra'), ('MA12', 'Dakhla-Oued Ed-Dahab'), ('ATRE', 'Autre / Etranger')], max_length=6, verbose_name='Région')),
                ('expected_exit_time', models.IntegerField(default=base.models.get_default_heure_depart, help_text='En secondes', verbose_name='Heure de départ des véhicules par défaut')),
                ('max_duration', models.IntegerField(default=base.models.get_default_max_duration, help_text='En secondes', verbose_name='Durée maximale par défaut')),
                ('max_delivery_number', models.PositiveIntegerField(default=base.models.get_default_max_delivery_number, verbose_name='Max livraisons par véhicule')),
                ('availability_check_method', models.CharField(choices=[('none', 'Aucune')], default='none', max_length=20, verbose_name='Méthode de vérification de disponibilité')),
                ('enable_odometer_checks', models.BooleanField(default=base.models.get_default_odometer_check, verbose_name='Relever les kilométrages ?')),
                ('enbale_lifo_loading', models.BooleanField(default=base.models.get_default_lifo_loading, verbose_name='Chargement LIFO ?')),
                ('default_perimeter', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='default_site', to='base.perimeter', verbose_name='Périmètre par défaut')),
            ],
            options={
                'verbose_name_plural': 'Sites',
                'db_table': 'base_site',
                'ordering': ['nom'],
                'permissions': (('can_access_hht_parameters', 'Gestion des HHT'), ('is_admin_for_hht', 'Mode administrateur pour')),
                'default_permissions': ['add', 'change', 'view'],
            },
        ),
        migrations.CreateModel(
            name='Societe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nom', models.CharField(max_length=30, verbose_name='Raison sociale')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('adresse1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('adresse2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('ville', models.CharField(max_length=15, verbose_name='Ville')),
                ('patente', models.CharField(blank=True, max_length=15, null=True, verbose_name='Patente')),
                ('rc', models.CharField(blank=True, max_length=15, null=True, verbose_name='Registre de commerce')),
                ('cnss', models.CharField(blank=True, max_length=15, null=True, verbose_name='Num CNSS')),
                ('idf', models.CharField(blank=True, max_length=15, null=True, verbose_name='Identifiant fiscal')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('ice', models.CharField(blank=True, max_length=15, null=True, verbose_name='ICE')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logo', verbose_name='Logo')),
                ('hht_logo', models.ImageField(blank=True, null=True, upload_to='logo', verbose_name='Logo pour HHT')),
                ('forme', models.CharField(blank=True, choices=[('sarl', 'SARL'), ('sarlau', 'SARL AU'), ('sa', 'SA')], max_length=10, null=True, verbose_name='Forme juridique')),
            ],
            options={
                'verbose_name_plural': 'Sociétés',
                'db_table': 'base_company',
                'ordering': ['nom'],
                'default_permissions': ['add', 'change', 'view'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone est incorrect.', regex='^0(|.| |-)(5|6|7|8)((|.| |-)[0-9]){8}$')], verbose_name='Numéro de téléphone')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('login_from_outside', models.BooleanField(default=False, help_text="Si coché, l'utilisateur pourra se connecter depuis l'extérieur de l'entreprise.", verbose_name="Peut se connecter de l'extérieur?")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', related_query_name='user', to='auth.group')),
                ('sites', models.ManyToManyField(blank=True, limit_choices_to={'actif': True}, to='base.site', verbose_name='Sites')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='user', to='auth.permission')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'base_user',
                'default_permissions': ['add', 'change', 'view'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('side_menu_expanded', models.BooleanField(default=True)),
                ('filter_menu_expanded', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='base.user')),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateurs',
                'db_table': 'base_user_profile',
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='SiteSequences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('so_last_sequence', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Commandes - Dernière seq')),
                ('so_prefix', models.CharField(blank=True, default='SO/$(SITE)/', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Commandes - Préfixe')),
                ('so_suffix', models.CharField(blank=True, default='', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Commandes - Suffixe')),
                ('so_nb_digits', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)], verbose_name='Commandes - Nombre de chiffres')),
                ('bl_last_sequence', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Livraisons - Dernière seq')),
                ('bl_prefix', models.CharField(blank=True, default='BL/$(SITE)/', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Livraisons - Préfixe')),
                ('bl_suffix', models.CharField(blank=True, default='', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Livraisons - Suffixe')),
                ('bl_nb_digits', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)], verbose_name='Livraisons - Nombre de chiffres')),
                ('inv_last_sequence', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Factures - Dernière seq')),
                ('inv_prefix', models.CharField(blank=True, default='F/$(SITE)/', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Factures - Préfixe')),
                ('inv_suffix', models.CharField(blank=True, default='', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Factures - Suffixe')),
                ('inv_nb_digits', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)], verbose_name='Factures - Nombre de chiffres')),
                ('trn_last_sequence', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tournée - Dernière seq')),
                ('trn_prefix', models.CharField(blank=True, default='T/$(SITE)/', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Tournée - Préfixe')),
                ('trn_suffix', models.CharField(blank=True, default='', help_text='$(YYYY): Année sur 4 chiffres, $(YY): Année sur 2 chiffres, $(MM): Mois,  $(DD): Jour, $(SITE): Référence du site.', max_length=20, verbose_name='Tournée - Suffixe')),
                ('trn_nb_digits', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)], verbose_name='Tournée - Nombre de chiffres')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='sequences', to='base.site', verbose_name='Site')),
            ],
            options={
                'db_table': 'base_site_sequence',
                'default_permissions': [],
            },
        ),
        migrations.AddField(
            model_name='site',
            name='societe_obj',
            field=models.ForeignKey(limit_choices_to={'actif': True}, on_delete=django.db.models.deletion.PROTECT, related_name='sites', to='base.societe', verbose_name='Société'),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.perimeter_category', verbose_name='Catégorie'),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='base.perimeter', verbose_name='parent'),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.site', verbose_name='Site'),
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone est incorrect.', regex='^0(|.| |-)(5|6|7|8)((|.| |-)[0-9]){8}$')], verbose_name='Numéro de téléphone')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email')),
                ('login_from_outside', models.BooleanField(default=False, help_text="Si coché, l'utilisateur pourra se connecter depuis l'extérieur de l'entreprise.", verbose_name="Peut se connecter de l'extérieur?")),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Utilisateur',
                'verbose_name_plural': 'historical Utilisateurs',
                'db_table': 'base_user_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSociete',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('nom', models.CharField(max_length=30, verbose_name='Raison sociale')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('adresse1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('adresse2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('ville', models.CharField(max_length=15, verbose_name='Ville')),
                ('patente', models.CharField(blank=True, max_length=15, null=True, verbose_name='Patente')),
                ('rc', models.CharField(blank=True, max_length=15, null=True, verbose_name='Registre de commerce')),
                ('cnss', models.CharField(blank=True, max_length=15, null=True, verbose_name='Num CNSS')),
                ('idf', models.CharField(blank=True, max_length=15, null=True, verbose_name='Identifiant fiscal')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('ice', models.CharField(blank=True, max_length=15, null=True, verbose_name='ICE')),
                ('logo', models.TextField(blank=True, max_length=100, null=True, verbose_name='Logo')),
                ('hht_logo', models.TextField(blank=True, max_length=100, null=True, verbose_name='Logo pour HHT')),
                ('forme', models.CharField(blank=True, choices=[('sarl', 'SARL'), ('sarlau', 'SARL AU'), ('sa', 'SA')], max_length=10, null=True, verbose_name='Forme juridique')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical societe',
                'verbose_name_plural': 'historical Sociétés',
                'db_table': 'base_company_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSite',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('nom', models.CharField(max_length=30, verbose_name='Nom')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('adresse1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('adresse2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('ville', models.CharField(blank=True, max_length=15, null=True, verbose_name='Ville')),
                ('patente', models.CharField(blank=True, max_length=15, null=True, verbose_name='Patente')),
                ('ref', models.CharField(db_index=True, max_length=5, verbose_name='Ref')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('taux_dt', models.DecimalField(decimal_places=3, default=0, help_text='Entre 0 et 100', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Taux de droits de timbre (%)')),
                ('region', models.CharField(choices=[('MA01', 'Tanger-Tétouan-Al Hoceïma'), ('MA02', "L'Oriental"), ('MA03', 'Fès-Meknès'), ('MA04', 'Rabat-Salé-Kénitra'), ('MA05', 'Béni Mellal-Khénifra'), ('MA06', 'Casablanca-Settat'), ('MA07', 'Marrakech-Safi'), ('MA08', 'Drâa-Tafilalet'), ('MA09', 'Souss-Massa'), ('MA10', 'Guelmim-Oued Noun'), ('MA11', 'Laâyoune-Sakia El Hamra'), ('MA12', 'Dakhla-Oued Ed-Dahab'), ('ATRE', 'Autre / Etranger')], max_length=6, verbose_name='Région')),
                ('expected_exit_time', models.IntegerField(default=base.models.get_default_heure_depart, help_text='En secondes', verbose_name='Heure de départ des véhicules par défaut')),
                ('max_duration', models.IntegerField(default=base.models.get_default_max_duration, help_text='En secondes', verbose_name='Durée maximale par défaut')),
                ('max_delivery_number', models.PositiveIntegerField(default=base.models.get_default_max_delivery_number, verbose_name='Max livraisons par véhicule')),
                ('availability_check_method', models.CharField(choices=[('none', 'Aucune')], default='none', max_length=20, verbose_name='Méthode de vérification de disponibilité')),
                ('enable_odometer_checks', models.BooleanField(default=base.models.get_default_odometer_check, verbose_name='Relever les kilométrages ?')),
                ('enbale_lifo_loading', models.BooleanField(default=base.models.get_default_lifo_loading, verbose_name='Chargement LIFO ?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('default_perimeter', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.perimeter', verbose_name='Périmètre par défaut')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('societe_obj', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'actif': True}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.societe', verbose_name='Société')),
            ],
            options={
                'verbose_name': 'historical site',
                'verbose_name_plural': 'historical Sites',
                'db_table': 'base_site_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPerimeter_Category',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_collapsed', models.BooleanField(default=False, verbose_name='A replier?')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Catégorie de périmètre',
                'verbose_name_plural': 'historical Catégories de périmètres',
                'db_table': 'base_perimeter_category_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPerimeter',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('external_id', models.CharField(max_length=12, verbose_name='Référence')),
                ('priority', models.PositiveIntegerField(default=100, verbose_name="Ordre d'affichage")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('region', models.CharField(choices=[('MA01', 'Tanger-Tétouan-Al Hoceïma'), ('MA02', "L'Oriental"), ('MA03', 'Fès-Meknès'), ('MA04', 'Rabat-Salé-Kénitra'), ('MA05', 'Béni Mellal-Khénifra'), ('MA06', 'Casablanca-Settat'), ('MA07', 'Marrakech-Safi'), ('MA08', 'Drâa-Tafilalet'), ('MA09', 'Souss-Massa'), ('MA10', 'Guelmim-Oued Noun'), ('MA11', 'Laâyoune-Sakia El Hamra'), ('MA12', 'Dakhla-Oued Ed-Dahab'), ('ATRE', 'Autre / Etranger')], max_length=6, verbose_name='Région')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.perimeter_category', verbose_name='Catégorie')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.perimeter', verbose_name='parent')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'historical Périmètre',
                'verbose_name_plural': 'historical Périmètres',
                'db_table': 'base_perimeter_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='perimeter',
            unique_together={('priority', 'site')},
        ),
    ]
